# Generated by Django 5.2.5 on 2025-09-03 05:18

import cloudinary.models
import django.db.models.deletion
import movie.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Genre',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=60, unique=True)),
            ],
            options={
                'verbose_name_plural': 'Genres',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Film',
            fields=[
                ('id', models.CharField(default=movie.models.generate_short_uuid, editable=False, max_length=10, primary_key=True, serialize=False, unique=True)),
                ('title', models.CharField(max_length=200)),
                ('slug', models.SlugField(blank=True, max_length=255, unique=True)),
                ('year', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('logline', models.CharField(blank=True, max_length=280)),
                ('film_type', models.CharField(choices=[('MOVIE', 'Movie'), ('DRAMA', 'Drama'), ('SHORT', 'Short Film'), ('DOCUMENTARY', 'Documentary'), ('SERIES', 'Series')], max_length=20)),
                ('thumbnail', cloudinary.models.CloudinaryField(blank=True, max_length=255, null=True, verbose_name='image')),
                ('trailer', cloudinary.models.CloudinaryField(blank=True, max_length=255, null=True)),
                ('full_film', cloudinary.models.CloudinaryField(blank=True, max_length=255, null=True)),
                ('trailer_public_id', models.CharField(blank=True, max_length=255, null=True)),
                ('full_film_public_id', models.CharField(blank=True, max_length=255, null=True)),
                ('status', models.CharField(choices=[('REVIEW', 'Under Review'), ('PUBLISHED', 'Published'), ('REJECTED', 'Rejected')], default='REVIEW', max_length=12)),
                ('currency', models.CharField(default='USD', max_length=3)),
                ('rent_price', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('rental_hours', models.PositiveIntegerField(default=48)),
                ('buy_price', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('full_film_duration', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('unique_views', models.PositiveIntegerField(default=0)),
                ('total_views', models.PositiveIntegerField(default=0)),
                ('total_earning', models.DecimalField(decimal_places=2, default=0, max_digits=12)),
                ('total_watch_time', models.PositiveIntegerField(default=0)),
                ('total_buy_earning', models.DecimalField(decimal_places=2, default=0.0, max_digits=12)),
                ('total_rent_earning', models.DecimalField(decimal_places=2, default=0.0, max_digits=12)),
                ('trailer_hls_url', models.URLField(blank=True, null=True)),
                ('film_hls_url', models.URLField(blank=True, null=True)),
                ('filmmaker', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='films', to=settings.AUTH_USER_MODEL)),
                ('genre', models.ManyToManyField(blank=True, to='movie.genre')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='FilmPlayView',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('viewed_at', models.DateTimeField(auto_now_add=True)),
                ('watch_time', models.PositiveIntegerField(default=0)),
                ('film', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='unique_play_records', to='movie.film')),
                ('viewer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-viewed_at'],
            },
        ),
        migrations.CreateModel(
            name='FilmView',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('viewed_at', models.DateTimeField(auto_now_add=True)),
                ('watch_time', models.PositiveIntegerField(default=0)),
                ('film', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='unique_view_records', to='movie.film')),
                ('viewer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-viewed_at'],
                'unique_together': {('film', 'viewer')},
            },
        ),
        migrations.CreateModel(
            name='MyFilms',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('price', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('access_type', models.CharField(choices=[('Buy', 'Lifetime'), ('Rent', 'Temporary')], max_length=10)),
                ('txn_id', models.CharField(blank=True, help_text='ReelBux/Stripe/PayPal TXN ID', max_length=100)),
                ('status', models.CharField(default='Active', max_length=20)),
                ('start_date', models.DateTimeField(auto_now_add=True)),
                ('end_date', models.DateTimeField(blank=True, null=True)),
                ('film', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='my_film_access', to='movie.film')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='my_films', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'My Film',
                'verbose_name_plural': 'My Films',
                'unique_together': {('user', 'film', 'access_type')},
            },
        ),
    ]
